#!/usr/bin/env python

import sys
import os
import stat
import tempfile
import subprocess
import json

HOME = os.path.expanduser("~")

GITHUB_MPL = "https://github.com/MPLLang/mpl.git"

# directories
DOTMPL = os.path.join(HOME, ".mpl")
DOTMPL_BIN = os.path.join(DOTMPL, "bin")
DOTMPL_VERSIONS = os.path.join(DOTMPL, "versions")

# files and scripts
DOTMPL_BIN_MPL = os.path.join(DOTMPL_BIN, "mpl")
DOTMPL_INFO = os.path.join(DOTMPL, "info.json")

# known key/value settings
KNOWN_KEYS = {"make-cmd", "make-options"}

# ===========================================================================
# some miscellaneous definitions and utilities

USAGE = """\
usage: mpl-switch <COMMAND>
Commands:
  current        display the currently selected version
  install <REF>  install a version (REF can be either a commit or a tag)
  select <REF>   select an installed version
  path <REF>     output the executable path for the version <REF>
  list           list all installed versions
  show           (synonym for 'list' command)
  init           initialize the .mpl directory
  set-option <KEY> <VALUE>
"""

def printUsageAndDie():
  sys.stderr.write(USAGE)
  sys.exit(1)


MPL_SCRIPT_TEMPLATE = """\
#!/bin/bash
{} "$@"
"""

DEFAULT_MPL_SCRIPT = """\
#!/bin/bash
>&2 echo "ERROR: no mpl version has been selected yet"
>&2 echo "(to select a version: mpl-switch select <COMMIT>)"
exit 1
"""

def ensureExecutable(path):
  currentMode = os.stat(path).st_mode
  os.chmod(path, currentMode | stat.S_IEXEC | stat.S_IREAD)


def executableMPLPath(version):
  versionDir = os.path.join(DOTMPL_VERSIONS, version)
  mplCmd = os.path.join(versionDir, "bin", "mpl")
  return mplCmd


def writeMPLScript(version):
  if version is None:
    scriptText = DEFAULT_MPL_SCRIPT
  else:
    mplCmd = executableMPLPath(version)
    scriptText = MPL_SCRIPT_TEMPLATE.format(mplCmd)
  with open(DOTMPL_BIN_MPL, 'w') as file:
    file.write(scriptText)
  ensureExecutable(DOTMPL_BIN_MPL)


def ensureDir(path):
  if os.path.isdir(path):
    return
  os.mkdir(path)


def is_exe(fpath):
  return os.path.isfile(fpath) and os.access(fpath, os.X_OK)


# ===========================================================================
# mpl-switch init

# Check if already has been initialized
def isInitialized():
  return os.path.isdir(DOTMPL) and \
         os.path.isdir(DOTMPL_BIN) and \
         os.path.isdir(DOTMPL_VERSIONS) and \
         is_exe(DOTMPL_BIN_MPL) and \
         os.path.exists(DOTMPL_INFO)


def checkInitialized():
  if isInitialized():
    return
  sys.stderr.write("ERROR: .mpl directory not initialized yet\n")
  sys.stderr.write("(run this: mpl-switch init)")
  sys.exit(1)


def doInit():
  if isInitialized():
    print("already initialized at {}".format(DOTMPL))
    print("make sure this is in your PATH: {}".format(os.path.join(DOTMPL_BIN)))
    return

  ensureDir(DOTMPL)
  ensureDir(DOTMPL_BIN)
  ensureDir(DOTMPL_VERSIONS)

  try:
    with open(DOTMPL_INFO, 'r') as file:
      info = json.load(file)
  except:
    with open(DOTMPL_INFO, 'w') as file:
      # initialize with empty info
      json.dump({}, file)
    info = {}

  currentVersion = None if "current" not in info else info["current"]
  writeMPLScript(currentVersion)

  print("initialized {}".format(DOTMPL))
  print("make sure this is in your PATH: {}".format(os.path.join(DOTMPL_BIN)))


# ===========================================================================
# mpl-switch current

def doCurrent():
  checkInitialized()
  with open(DOTMPL_INFO, 'r') as file:
    info = json.load(file)
  if "current" in info:
    x = info["current"]
    maybeTag = info["tags"][x] if "tags" in info and x in info["tags"] else None
    tagMsg = " (git tag: {})".format(maybeTag) if maybeTag is not None and maybeTag != x else ""
    print("{}{}".format(x, tagMsg))
  else:
    print("no version currently selected")
    print("(to select: mpl-switch select <COMMIT|TAG>)")


# ===========================================================================
# mpl-switch update-tags

def doUpdateTags():
  checkInitialized()

  if len(sys.argv) > 2:
    printUsageAndDie()

  dname = "updatetags"
  tempDir = os.path.join(tempfile.mkdtemp(), dname)
  subprocess.check_call(
    ["git", "clone", "--filter=blob:none", "-n", "-q", GITHUB_MPL, tempDir]
  )

  with open(DOTMPL_INFO, 'r') as file:
    info = json.load(file)
  if "tags" not in info:
    info["tags"] = {}

  commits = os.listdir(DOTMPL_VERSIONS)
  for commit in commits:
    try:
      maybeTag = subprocess.check_output(
        ["git", "tag", "--points-at", commit],
        cwd=tempDir
      ).rstrip("\n")
      if maybeTag != "":
        info["tags"][commit] = maybeTag
        print("found tag for {}: {}".format(commit, maybeTag))
    except:
      pass

  with open(DOTMPL_INFO, 'w') as file:
    json.dump(info, file)

# ===========================================================================
# mpl-switch install

def getMakeCmd(with_options=True):
  with open(DOTMPL_INFO, 'r') as file:
    info = json.load(file)
  if "options" not in info:
    return ["make"]
  opts = info["options"]
  my_make = ["make" if "make-cmd" not in opts else opts["make-cmd"]]
  if with_options and "make-options" in opts:
    my_make += [opts["make-options"]]
  return my_make


def doInstall():
  checkInitialized()

  if len(sys.argv) < 3:
    printUsageAndDie()

  commit = sys.argv[2]
  thisVersionDir = os.path.join(DOTMPL_VERSIONS, commit)
  ensureDir(thisVersionDir)

  if os.path.exists(os.path.join(thisVersionDir, "bin", "mpl")):
    print("{} is already installed".format(commit))
    return

  tempDir = os.path.join(tempfile.mkdtemp(), commit)

  subprocess.check_call(["git", "clone", "-n", GITHUB_MPL, tempDir])
  subprocess.check_call(["git", "checkout", commit], cwd=tempDir)

  try:
    maybeTag = subprocess.check_output(
      ["git", "tag", "--points-at", commit],
      cwd=tempDir
    ).rstrip("\n")
    if maybeTag == "":
      maybeTag = None
  except:
    maybeTag = None

  subprocess.check_call(
    # ["make"] or ["gmake"] or whatever
    getMakeCmd(with_options=True),
    cwd=tempDir
  )
  
  subprocess.check_call(
    # ["make"] + ["install", ...]
    getMakeCmd(with_options=False) + ["install", "PREFIX={}".format(thisVersionDir)],
    cwd=tempDir
  )

  if maybeTag is not None:
    with open(DOTMPL_INFO, 'r') as file:
      info = json.load(file)
    if "tags" not in info:
      info["tags"] = {}
    info["tags"][commit] = maybeTag
    with open(DOTMPL_INFO, 'w') as file:
      json.dump(info, file)

  if maybeTag is not None:
    tagMsg = " (git tag: {})".format(maybeTag)
  else:
    tagMsg = ""
  print("installed {}{}".format(commit, tagMsg))
  print("(to select this version: mpl-switch select {})".format(commit))

# ===========================================================================
# mpl-switch select

def doSelect():
  checkInitialized()

  if len(sys.argv) < 3:
    printUsageAndDie()

  commit = sys.argv[2]

  thisVersionDir = os.path.join(DOTMPL_VERSIONS, commit)
  if not os.path.exists(os.path.join(thisVersionDir, "bin", "mpl")):
    sys.stderr.write("ERROR: {} is not installed\n".format(commit))
    sys.stderr.write("you need to run: mpl-switch install {}\n".format(commit))
    sys.exit(1)

  writeMPLScript(commit)

  with open(DOTMPL_INFO, 'r') as file:
    info = json.load(file)
  info["current"] = commit
  with open(DOTMPL_INFO, 'w') as file:
    json.dump(info, file)

  print("{} set to use {}".format(DOTMPL_BIN_MPL, commit))
  print("make sure this is in your PATH: {}".format(os.path.join(DOTMPL_BIN)))


# ===========================================================================
# mpl-switch path <REF>

def doPath():
  checkInitialized()

  if len(sys.argv) < 3:
    printUsageAndDie()

  commit = sys.argv[2]

  thisVersionDir = os.path.join(DOTMPL_VERSIONS, commit)
  if not os.path.exists(os.path.join(thisVersionDir, "bin", "mpl")):
    sys.stderr.write("ERROR: {} is not installed\n".format(commit))
    sys.stderr.write("you need to run: mpl-switch install {}\n".format(commit))
    sys.exit(1)

  print(executableMPLPath(commit))

# ===========================================================================
# mpl-switch show|list

def doList():
  checkInitialized()

  commits = os.listdir(DOTMPL_VERSIONS)

  with open(DOTMPL_INFO, 'r') as file:
    info = json.load(file)
    current = None if "current" not in info else info["current"]

  if len(commits) == 0:
    print("no versions installed yet")
    print("(to install: mpl-switch install <COMMIT|TAG>)")
    return

  def show(x):
    if ("tags" in info) and (x in info["tags"]) and (info["tags"][x] != x):
      tagMsg = " (git tag: {})".format(info["tags"][x])
    else:
      tagMsg = ""
    if x == current:
      print("  * {}{}".format(x, tagMsg))
    else:
      print("    {}{}".format(x, tagMsg))

  print("INSTALLED VERSIONS:")
  for x in commits:
    show(x)


# ===========================================================================
# mpl-switch set-option <KEY> <VALUE>

def doSetOption():
  checkInitialized()

  if len(sys.argv) < 4:
    printUsageAndDie()

  key_name = sys.argv[2]
  desired_value = sys.argv[3]

  if key_name not in KNOWN_KEYS:
    sys.stderr.write("ERROR: unknown key: {}\n".format(key_name))
    sys.stderr.write("known keys: {}\n".format(" ".join(KNOWN_KEYS)))
    sys.exit(1)

  with open(DOTMPL_INFO, 'r') as file:
    info = json.load(file)

  if "options" not in info:
    info["options"] = {}
  info["options"][key_name] = desired_value

  with open(DOTMPL_INFO, 'w') as file:
    json.dump(info, file)

  print("set {}: {}".format(key_name, desired_value))


# ===========================================================================
# mpl-switch show-options

def doShowOptions():
  checkInitialized()

  with open(DOTMPL_INFO, 'r') as file:
    info = json.load(file)

  kvs = info.get("options", {})
  if len(kvs.items()) == 0:
    print("(none)")
    return

  max_key_len = max(len("KEY"), max(len(str(k)) for k in kvs.keys()))
  max_val_len = max(len("VALUE"), max(len(str(v)) for v in kvs.values()))
  row_fmt_str = '{:<' + str(max_key_len) + '} {:<' + str(max_val_len) + '}'
  print(row_fmt_str.format('KEY', 'VALUE'))
  for k,v in kvs.items():
    print(row_fmt_str.format(k, v))

# ===========================================================================

if len(sys.argv) < 2:
  printUsageAndDie()

cmd = sys.argv[1]

if cmd == "init":
  doInit()
elif cmd == "install":
  doInstall()
elif cmd == "select":
  doSelect()
elif cmd == "show" or cmd == "list":
  doList()
elif cmd == "current":
  doCurrent()
elif cmd == "update-tags":
  doUpdateTags()
elif cmd == "path":
  doPath()
elif cmd == "set-option":
  doSetOption()
elif cmd == "show-options":
  doShowOptions()
else:
  sys.stderr.write("unknown command: {}\n".format(cmd))
  printUsageAndDie()

#!/usr/bin/python

import sys
import os
import stat
import tempfile
import subprocess
import json

HOME = os.path.expanduser("~")

GITHUB_MPL = "https://github.com/MPLLang/mpl.git"

# directories
DOTMPL = os.path.join(HOME, ".mpl")
DOTMPL_BIN = os.path.join(DOTMPL, "bin")
DOTMPL_VERSIONS = os.path.join(DOTMPL, "versions")

# files and scripts
DOTMPL_BIN_MPL = os.path.join(DOTMPL_BIN, "mpl")
DOTMPL_INFO = os.path.join(DOTMPL, "info.json")

# ===========================================================================
# some miscellaneous definitions and utilities

USAGE = """\
usage: mpl-switch [ init | show | install <COMMIT> | select <COMMIT> ]
"""

def printUsageAndDie():
  sys.stderr.write(USAGE)
  sys.exit(1)


MPL_SCRIPT_TEMPLATE = """\
#!/bin/bash
{} "$@"
"""

DEFAULT_MPL_SCRIPT = """\
#!/bin/bash
>&2 echo "ERROR: no mpl version has been selected yet"
>&2 echo "(to select a version: mpl-switch select <COMMIT>)"
exit 1
"""

def ensureExecutable(path):
  currentMode = os.stat(path).st_mode
  os.chmod(path, currentMode | stat.S_IEXEC | stat.S_IREAD)


def writeMPLScript(version):
  if version is None:
    scriptText = DEFAULT_MPL_SCRIPT
  else:
    versionDir = os.path.join(DOTMPL_VERSIONS, version)
    mplCmd = os.path.join(versionDir, "bin", "mpl")
    scriptText = MPL_SCRIPT_TEMPLATE.format(mplCmd)
  with open(DOTMPL_BIN_MPL, 'w') as file:
    file.write(scriptText)
  ensureExecutable(DOTMPL_BIN_MPL)


def ensureDir(path):
  if os.path.isdir(path):
    return
  os.mkdir(path)


def is_exe(fpath):
  return os.path.isfile(fpath) and os.access(fpath, os.X_OK)


# ===========================================================================
# mpl-switch init

# Check if already has been initialized
def isInitialized():
  return os.path.isdir(DOTMPL) and \
         os.path.isdir(DOTMPL_BIN) and \
         os.path.isdir(DOTMPL_VERSIONS) and \
         is_exe(DOTMPL_BIN_MPL) and \
         os.path.exists(DOTMPL_INFO)


def checkInitialized():
  if isInitialized():
    return
  sys.stderr.write("ERROR: .mpl directory not initialized yet\n")
  sys.stderr.write("(run this: mpl-switch init)")
  sys.exit(1)


def doInit():
  if isInitialized():
    print("already initialized at {}".format(DOTMPL))
    print("make sure this is in your PATH: {}".format(os.path.join(DOTMPL_BIN)))
    return

  ensureDir(DOTMPL)
  ensureDir(DOTMPL_BIN)
  ensureDir(DOTMPL_VERSIONS)

  try:
    with open(DOTMPL_INFO, 'r') as file:
      info = json.load(file)
  except:
    with open(DOTMPL_INFO, 'w') as file:
      # initialize with empty info
      json.dump({}, file)
    info = {}

  currentVersion = None if "current" not in info else info["current"]
  writeMPLScript(currentVersion)

  print("initialized {}".format(DOTMPL))
  print("make sure this is in your PATH: {}".format(os.path.join(DOTMPL_BIN)))


# ===========================================================================
# mpl-switch current

# def doCurrent():
#   checkInitialized()
#   with open(DOTMPL_INFO, 'r') as file:
#     info = json.load(file)
#   if "current" in info:
#     print(info["current"])
#   else:
#     print("no version currently selected")
#     print("(to select: mpl-switch select <COMMIT>)")


# ===========================================================================
# mpl-switch install

def doInstall():
  checkInitialized()

  if len(sys.argv) < 3:
    printUsageAndDie()

  commit = sys.argv[2]
  thisVersionDir = os.path.join(DOTMPL_VERSIONS, commit)
  ensureDir(thisVersionDir)

  if os.path.exists(os.path.join(thisVersionDir, "bin", "mpl")):
    print("{} is already installed".format(commit))
    return

  tempDir = os.path.join(tempfile.mkdtemp(), commit)

  subprocess.check_call(["git", "clone", "-n", GITHUB_MPL, tempDir])
  subprocess.check_call(["git", "checkout", commit], cwd=tempDir)
  subprocess.check_call(["make"], cwd=tempDir)
  subprocess.check_call(
    ["make", "install", "PREFIX={}".format(thisVersionDir)],
    cwd=tempDir
  )

  print("installed {}".format(commit))
  print("(to select this version: mpl-switch select {})".format(commit))

# ===========================================================================
# mpl-switch select

def doSelect():
  checkInitialized()

  if len(sys.argv) < 3:
    printUsageAndDie()

  commit = sys.argv[2]

  thisVersionDir = os.path.join(DOTMPL_VERSIONS, commit)
  if not os.path.exists(os.path.join(thisVersionDir, "bin", "mpl")):
    sys.stderr.write("ERROR: {} is not installed\n".format(commit))
    sys.stderr.write("you need to run: mpl-switch install {}\n".format(commit))
    sys.exit(1)

  writeMPLScript(commit)

  with open(DOTMPL_INFO, 'r') as file:
    info = json.load(file)
  info["current"] = commit
  with open(DOTMPL_INFO, 'w') as file:
    json.dump(info, file)

  print("{} set to use {}".format(DOTMPL_BIN_MPL, commit))
  print("make sure this is in your PATH: {}".format(os.path.join(DOTMPL_BIN)))

# ===========================================================================
# mpl-switch show

def doShow():
  checkInitialized()

  commits = os.listdir(DOTMPL_VERSIONS)

  with open(DOTMPL_INFO, 'r') as file:
    info = json.load(file)
    current = None if "current" not in info else info["current"]

  if len(commits) == 0:
    print("no versions installed yet")
    print("(to install: mpl-switch install <COMMIT>)")
    return

  print("VERSIONS:")
  for x in commits:
    if x == current:
      print("  * {}  <-- current".format(x))
    else:
      print("    {}".format(x))

# ===========================================================================

if len(sys.argv) < 2:
  printUsageAndDie()

cmd = sys.argv[1]

if cmd == "init":
  doInit()
elif cmd == "install":
  doInstall()
elif cmd == "select":
  doSelect()
elif cmd == "show":
  doShow()
elif cmd == "current":
  doCurrent()
else:
  sys.stderr.write("unknown command: {}\n".format(cmd))
  printUsageAndDie()
